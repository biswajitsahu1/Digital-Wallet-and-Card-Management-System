{"@timestamp":"2025-07-23T15:02:28.398426+05:30","@version":"1","message":"Starting ServiceDiscoveryApplication using Java 21.0.5 with PID 55042 (/Users/biswajitsahu/Desktop/Digital Wallet and Card Management System/discovery/target/classes started by biswajitsahu in /Users/biswajitsahu/Desktop/Digital Wallet and Card Management System)","logger_name":"com.bank.api.discovery.ServiceDiscoveryApplication","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:28.404116+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.bank.api.discovery.ServiceDiscoveryApplication","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.007623+05:30","@version":"1","message":"BeanFactory id=f7e073f9-47e5-345a-9afd-7e54aa0bfe13","logger_name":"org.springframework.cloud.context.scope.GenericScope","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.039287+05:30","@version":"1","message":"Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [lbRestClientPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.042351+05:30","@version":"1","message":"Bean 'org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration' of type [org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.043587+05:30","@version":"1","message":"Bean 'org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration' of type [org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.047432+05:30","@version":"1","message":"Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.048454+05:30","@version":"1","message":"Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.048795+05:30","@version":"1","message":"Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda/0x000000a80141edb0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.04963+05:30","@version":"1","message":"Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.0533+05:30","@version":"1","message":"Bean 'spring.cloud.loadbalancer-org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.057851+05:30","@version":"1","message":"Bean 'default.org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration.LoadBalancerClientSpecification' of type [org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientSpecification] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.058349+05:30","@version":"1","message":"Bean 'default.org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration.LoadBalancerClientSpecification' of type [org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientSpecification] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.058677+05:30","@version":"1","message":"Bean 'default.org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration.LoadBalancerClientSpecification' of type [org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientSpecification] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.059375+05:30","@version":"1","message":"Bean 'loadBalancerClientFactory' of type [org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.060474+05:30","@version":"1","message":"Bean 'blockingLoadBalancerClient' of type [org.springframework.cloud.loadbalancer.blocking.client.BlockingLoadBalancerClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.065543+05:30","@version":"1","message":"Bean 'loadBalancerServiceInstanceCookieTransformer' of type [org.springframework.cloud.loadbalancer.core.LoadBalancerServiceInstanceCookieTransformer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.066781+05:30","@version":"1","message":"Bean 'xForwarderHeadersTransformer' of type [org.springframework.cloud.loadbalancer.blocking.XForwardedHeadersTransformer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.067855+05:30","@version":"1","message":"Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.069067+05:30","@version":"1","message":"Bean 'loadBalancerRequestFactory' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerRequestFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.070152+05:30","@version":"1","message":"Bean 'loadBalancerInterceptor' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:29.208473+05:30","@version":"1","message":"Tomcat initialized with port 8761 (http)","logger_name":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.213671+05:30","@version":"1","message":"Initializing ProtocolHandler [\"http-nio-8761\"]","logger_name":"org.apache.coyote.http11.Http11NioProtocol","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.215242+05:30","@version":"1","message":"Starting service [Tomcat]","logger_name":"org.apache.catalina.core.StandardService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.215476+05:30","@version":"1","message":"Starting Servlet engine: [Apache Tomcat/10.1.16]","logger_name":"org.apache.catalina.core.StandardEngine","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.260471+05:30","@version":"1","message":"Initializing Spring embedded WebApplicationContext","logger_name":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.261463+05:30","@version":"1","message":"Root WebApplicationContext: initialization completed in 831 ms","logger_name":"org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.531677+05:30","@version":"1","message":"Filter 'eurekaVersionFilterRegistration' configured for use","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration$1","thread_name":"main","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:29.805069+05:30","@version":"1","message":"Using JSON encoding codec LegacyJacksonJson","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.805873+05:30","@version":"1","message":"Using JSON decoding codec LegacyJacksonJson","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.918003+05:30","@version":"1","message":"Using XML encoding codec XStreamXml","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:29.918154+05:30","@version":"1","message":"Using XML decoding codec XStreamXml","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.228995+05:30","@version":"1","message":"Constructed eureka meta-data healthcheckUrl: http://localhost:8761/actuator/health","logger_name":"org.springframework.cloud.netflix.eureka.metadata.DefaultManagementMetadataProvider","thread_name":"main","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:30.229168+05:30","@version":"1","message":"Constructed eureka meta-data statusPageUrl: http://localhost:8761/actuator/info","logger_name":"org.springframework.cloud.netflix.eureka.metadata.DefaultManagementMetadataProvider","thread_name":"main","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:30.259976+05:30","@version":"1","message":"Exposing 2 endpoint(s) beneath base path '/actuator'","logger_name":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.278483+05:30","@version":"1","message":"Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3976910, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6e149395, org.springframework.security.web.context.SecurityContextHolderFilter@374bf34b, org.springframework.security.web.header.HeaderWriterFilter@7ed5cc8c, org.springframework.web.filter.CorsFilter@19bbb216, org.springframework.security.web.authentication.logout.LogoutFilter@531b1778, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@25890ce3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6efc9d3f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@294bb6ae, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6cfac0bd, org.springframework.security.web.access.ExceptionTranslationFilter@7f6a6d46, org.springframework.security.web.access.intercept.AuthorizationFilter@6778636f]","logger_name":"org.springframework.security.web.DefaultSecurityFilterChain","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.543433+05:30","@version":"1","message":"Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.","logger_name":"org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:30.553507+05:30","@version":"1","message":"Setting initial instance status as: STARTING","logger_name":"org.springframework.cloud.netflix.eureka.InstanceInfoFactory","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.613465+05:30","@version":"1","message":"Initializing Eureka in region us-east-1","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.618979+05:30","@version":"1","message":"Using JSON encoding codec LegacyJacksonJson","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.619099+05:30","@version":"1","message":"Using JSON decoding codec LegacyJacksonJson","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.619141+05:30","@version":"1","message":"Using XML encoding codec XStreamXml","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.619181+05:30","@version":"1","message":"Using XML decoding codec XStreamXml","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.629715+05:30","@version":"1","message":"Resolving eureka endpoints via configuration","logger_name":"com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.643272+05:30","@version":"1","message":"Disable delta property : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.643422+05:30","@version":"1","message":"Single vip registry refresh property : null","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.643469+05:30","@version":"1","message":"Force full registry fetch : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.643507+05:30","@version":"1","message":"Application is null : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.643543+05:30","@version":"1","message":"Registered Applications size is zero : true","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.643583+05:30","@version":"1","message":"Application version is -1: true","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.643623+05:30","@version":"1","message":"Getting all instance registry info from the eureka server","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.71925+05:30","@version":"1","message":"Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://eureka:password@localhost:8761/eureka/}, exception=java.net.ConnectException: Connection refused stacktrace=jakarta.ws.rs.ProcessingException: java.net.ConnectException: Connection refused\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:275)\n\tat org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:300)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$invoke$0(JerseyInvocation.java:662)\n\tat org.glassfish.jersey.client.JerseyInvocation.call(JerseyInvocation.java:697)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$runInScope$3(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:292)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:274)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:205)\n\tat org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:390)\n\tat org.glassfish.jersey.client.JerseyInvocation.runInScope(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:661)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:413)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.get(JerseyInvocation.java:313)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.getApplicationsInternal(AbstractJersey3EurekaHttpClient.java:266)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.getApplications(AbstractJersey3EurekaHttpClient.java:213)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:121)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:80)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1045)\n\tat com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:958)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:396)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:247)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:242)\n\tat org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:68)\n\tat org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:320)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:643)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:364)\n\tat org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:375)\n\tat org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:179)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:361)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:229)\n\tat jdk.proxy2/jdk.proxy2.$Proxy75.getApplications(Unknown Source)\n\tat org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration.peerAwareInstanceRegistry(EurekaServerAutoConfiguration.java:211)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:643)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)\n\tat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)\n\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:546)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:323)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)\n\tat com.bank.api.discovery.ServiceDiscoveryApplication.main(ServiceDiscoveryApplication.java:12)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.base/sun.nio.ch.Net.pollConnect(Native Method)\n\tat java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)\n\tat java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)\n\tat java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)\n\tat java.base/java.net.Socket.connect(Socket.java:751)\n\tat java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:178)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)\n\tat java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)\n\tat java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)\n\tat java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1319)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1252)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1138)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1067)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1690)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1614)\n\tat java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:531)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:415)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:273)\n\t... 103 more\n","logger_name":"com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.720217+05:30","@version":"1","message":"Request execution failed with message: java.net.ConnectException: Connection refused","logger_name":"com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:30.720544+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 - was unable to refresh its cache! This periodic background refresh will be retried in 30 seconds. status = Cannot execute request on any known server stacktrace = com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1045)\n\tat com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:958)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:396)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:247)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:242)\n\tat org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:68)\n\tat org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:320)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:643)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:364)\n\tat org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:375)\n\tat org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:179)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:361)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:229)\n\tat jdk.proxy2/jdk.proxy2.$Proxy75.getApplications(Unknown Source)\n\tat org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration.peerAwareInstanceRegistry(EurekaServerAutoConfiguration.java:211)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:643)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)\n\tat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)\n\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:546)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:323)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)\n\tat com.bank.api.discovery.ServiceDiscoveryApplication.main(ServiceDiscoveryApplication.java:12)\n","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.721181+05:30","@version":"1","message":"Initial registry fetch from primary servers failed","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.721247+05:30","@version":"1","message":"Using default backup registry implementation which does not do anything.","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:30.72143+05:30","@version":"1","message":"Initial registry fetch from backup servers failed","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.722025+05:30","@version":"1","message":"Starting heartbeat executor: renew interval is: 30","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.722941+05:30","@version":"1","message":"InstanceInfoReplicator onDemand update allowed rate per min is 4","logger_name":"com.netflix.discovery.InstanceInfoReplicator","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.725064+05:30","@version":"1","message":"Discovery Client initialized at timestamp 1753263150724 with initial instances count: 0","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.741115+05:30","@version":"1","message":"Initializing ...","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.742684+05:30","@version":"1","message":"The replica size seems to be empty. Check the route 53 DNS Registry","logger_name":"com.netflix.eureka.cluster.PeerEurekaNodes","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:30.746007+05:30","@version":"1","message":"Finished initializing remote region registries. All known remote regions: []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.74646+05:30","@version":"1","message":"Initialized","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.777568+05:30","@version":"1","message":"Registering application SERVICE-DISCOVERY with eureka with status UP","logger_name":"org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.778047+05:30","@version":"1","message":"Saw local status change event StatusChangeEvent [timestamp=1753263150778, current=UP, previous=STARTING]","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.778852+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761: registering service...","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.780208+05:30","@version":"1","message":"Starting ProtocolHandler [\"http-nio-8761\"]","logger_name":"org.apache.coyote.http11.Http11NioProtocol","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.786834+05:30","@version":"1","message":"isAws returned false","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.787735+05:30","@version":"1","message":"Initialized server context","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.801762+05:30","@version":"1","message":"Tomcat started on port 8761 (http) with context path ''","logger_name":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.803332+05:30","@version":"1","message":"Updating port to 8761","logger_name":"org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.828571+05:30","@version":"1","message":"Started ServiceDiscoveryApplication in 2.975 seconds (process running for 3.506)","logger_name":"com.bank.api.discovery.ServiceDiscoveryApplication","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.866683+05:30","@version":"1","message":"Initializing Spring DispatcherServlet 'dispatcherServlet'","logger_name":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]","thread_name":"http-nio-8761-exec-1","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.867009+05:30","@version":"1","message":"Initializing Servlet 'dispatcherServlet'","logger_name":"org.springframework.web.servlet.DispatcherServlet","thread_name":"http-nio-8761-exec-1","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.868007+05:30","@version":"1","message":"Completed initialization in 0 ms","logger_name":"org.springframework.web.servlet.DispatcherServlet","thread_name":"http-nio-8761-exec-1","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:30.881526+05:30","@version":"1","message":"Cache miss for REQUEST dispatch to '/eureka/apps/SERVICE-DISCOVERY' (previous null). Performing CorsConfiguration lookup. This is logged once only at WARN level, and every time at TRACE.","logger_name":"org.springframework.web.servlet.handler.HandlerMappingIntrospector","thread_name":"http-nio-8761-exec-1","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:31.051324+05:30","@version":"1","message":"Cache miss for REQUEST dispatch to '/eureka/apps/SERVICE-DISCOVERY' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.","logger_name":"org.springframework.web.servlet.handler.HandlerMappingIntrospector","thread_name":"http-nio-8761-exec-1","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:02:31.094916+05:30","@version":"1","message":"Registering instance 192.168.1.10:service-discovery:8761 (replication=null)","logger_name":"com.netflix.eureka.resources.ApplicationResource","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.09627+05:30","@version":"1","message":"register SERVICE-DISCOVERY, vip service-discovery, leaseDuration 90, isReplication false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.096953+05:30","@version":"1","message":"No previous lease information found; it is new registration","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.097201+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.097361+05:30","@version":"1","message":"Returning the default instance status UP for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.097601+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.097918+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.097986+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098042+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098092+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098141+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098186+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098244+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.09829+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098336+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.09838+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098422+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098465+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098513+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098559+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098606+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098652+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098698+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098741+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098785+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098827+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098873+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098917+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.098959+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.099003+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.09905+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.099091+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.099135+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.099175+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.099218+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.099258+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.099302+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:02:31.099351+05:30","@version":"1","message":"Registered instance SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 with status UP (replication=false)","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:02:31.105119+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 - registration status: 204","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:00.016871+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:00.734894+05:30","@version":"1","message":"Disable delta property : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:00.73565+05:30","@version":"1","message":"Single vip registry refresh property : null","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:00.735844+05:30","@version":"1","message":"Force full registry fetch : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:00.73596+05:30","@version":"1","message":"Application is null : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:00.736115+05:30","@version":"1","message":"Registered Applications size is zero : true","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:00.73622+05:30","@version":"1","message":"Application version is -1: true","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:00.736361+05:30","@version":"1","message":"Getting all instance registry info from the eureka server","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:00.884771+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:00.886474+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:00.886662+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:00.886796+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:00.886913+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:00.8909+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:00.900159+05:30","@version":"1","message":"The response status is 200","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:30.501217+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:30.536473+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.292873+05:30","@version":"1","message":"register SERVICE-DISCOVERY, vip service-discovery, leaseDuration 90, isReplication true","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.344344+05:30","@version":"1","message":"Existing lease found (existing=1753263150777, provided=1753263150777","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.35452+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.35469+05:30","@version":"1","message":"Returning the default instance status UP for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.36189+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.368994+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.369217+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.369319+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.369364+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.369401+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.369448+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.369507+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.36957+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.37006+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.370163+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.427452+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.427959+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.428128+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.428191+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.428378+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.42965+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.429905+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.430232+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.430394+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.430866+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.43107+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.431264+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.431405+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.43152+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.43177+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.43184+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.431916+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.43199+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.432104+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.432196+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.432305+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.444618+05:30","@version":"1","message":"Registered instance SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 with status UP (replication=true)","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:31.457573+05:30","@version":"1","message":"Got 1 instances from neighboring DS node","logger_name":"com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:31.460747+05:30","@version":"1","message":"Renew threshold is: 1","logger_name":"com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:31.480477+05:30","@version":"1","message":"Changing status to UP","logger_name":"com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:03:31.588115+05:30","@version":"1","message":"The number of elements in the delta queue is : 2","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.588391+05:30","@version":"1","message":"The instance id 192.168.1.10:service-discovery:8761 is found with status UP and actiontype ADDED","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.588489+05:30","@version":"1","message":"The instance id 192.168.1.10:service-discovery:8761 is found with status UP and actiontype ADDED","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.589687+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.590148+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.591748+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.591814+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.591897+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:03:31.631628+05:30","@version":"1","message":"Started Eureka Server","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:04:00.511376+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:00.516012+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:00.516927+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:00.518122+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:00.524498+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:01.737334+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:01.737902+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:01.738028+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:01.739758+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:30.520692+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:30.524406+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:30.525706+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:31.52017+05:30","@version":"1","message":"Running the evict task with compensationTime 0ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:04:31.523075+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:31.886018+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:31.886544+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:31.886617+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:04:31.886759+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:00.528983+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:00.532182+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:00.533168+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:02.029828+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:02.030119+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:02.030185+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:02.030317+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:30.538273+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:30.54054+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:30.541393+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:31.527843+05:30","@version":"1","message":"Running the evict task with compensationTime 9ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:05:31.52846+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:32.166739+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:32.166978+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:32.167056+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:05:32.167196+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:00.545277+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:00.557822+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:00.558739+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:02.314572+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:02.314829+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:02.31492+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:02.315051+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:30.553883+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:30.555989+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:30.556955+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:06:31.534654+05:30","@version":"1","message":"Running the evict task with compensationTime 10ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:06:31.535016+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:08:54.385807+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:08:54.407843+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:08:54.408373+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:08:54.40867+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:22.061608+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:22.080076+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:22.091405+05:30","@version":"1","message":"The number of elements in the delta queue is : 1","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:22.093641+05:30","@version":"1","message":"The instance id 192.168.1.10:service-discovery:8761 is found with status UP and actiontype ADDED","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:22.121201+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:22.126121+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:22.126568+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:22.127387+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:24.543656+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:24.545909+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:24.546059+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:24.546278+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:52.060335+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:52.062576+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:52.063692+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:52.635403+05:30","@version":"1","message":"Resolving eureka endpoints via configuration","logger_name":"com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver","thread_name":"AsyncResolver-bootstrap-executor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:09:53.041358+05:30","@version":"1","message":"Running the evict task with compensationTime 13ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:09:53.042183+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:54.681238+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:54.681431+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:54.681482+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:09:54.68162+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:22.065683+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:22.074862+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:22.075982+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:24.812132+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:24.813154+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:24.813222+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:24.813886+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:52.068533+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:52.071756+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:52.072704+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:53.044464+05:30","@version":"1","message":"Running the evict task with compensationTime 5ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:10:53.045408+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:54.93246+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:54.933931+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:54.933996+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:10:54.934134+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:22.072726+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:22.075243+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:22.075819+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:25.081052+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:25.081561+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:25.081614+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:25.081735+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:52.075671+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:52.077475+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:52.07788+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:53.045571+05:30","@version":"1","message":"Running the evict task with compensationTime 3ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:11:53.045724+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:55.198943+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:55.20152+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:55.201991+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:11:55.20253+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:22.089544+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:22.093551+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:22.094863+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:25.309688+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:25.309984+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:25.310109+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:25.310242+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:52.095569+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:52.100807+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:52.104393+05:30","@version":"1","message":"The number of elements in the delta queue is : 0","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:52.111492+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:52.115619+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:52.115766+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:52.127248+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:53.049101+05:30","@version":"1","message":"Running the evict task with compensationTime 5ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:12:53.049349+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:55.456605+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:55.456912+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:55.457108+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:12:55.457593+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:22.093046+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:22.097649+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:22.099359+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:25.653532+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:25.654046+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:25.654158+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:25.654281+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:52.097423+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:52.099854+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:52.10065+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:53.055604+05:30","@version":"1","message":"Running the evict task with compensationTime 7ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:13:53.057209+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:55.775654+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:55.776062+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:55.776145+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:13:55.776393+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:22.098287+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:22.102691+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:22.103589+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:25.902423+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:25.903027+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:25.903186+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:25.903388+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:52.112472+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:52.114+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:52.114486+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:52.636977+05:30","@version":"1","message":"Resolving eureka endpoints via configuration","logger_name":"com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver","thread_name":"AsyncResolver-bootstrap-executor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:14:52.726999+05:30","@version":"1","message":"The replica size seems to be empty. Check the route 53 DNS Registry","logger_name":"com.netflix.eureka.cluster.PeerEurekaNodes","thread_name":"Eureka-PeerNodesUpdater","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:14:53.05862+05:30","@version":"1","message":"Running the evict task with compensationTime 6ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:14:53.059104+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:56.059369+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:56.060012+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:56.060089+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:14:56.060272+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:22.109949+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:22.12528+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:22.128453+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:26.225818+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:26.22777+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:26.228125+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:26.229477+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:52.111642+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:52.114252+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:52.11876+05:30","@version":"1","message":"The number of elements in the delta queue is : 0","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:52.125458+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:52.133236+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:52.133823+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:52.143359+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:53.061307+05:30","@version":"1","message":"Running the evict task with compensationTime 5ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:15:53.061903+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:56.387157+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:56.387931+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:56.38824+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:15:56.388429+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:22.115664+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:22.122226+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:22.123143+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:26.548835+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:26.550274+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:26.550469+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:26.55077+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:52.119551+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:52.123844+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:52.124828+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:53.064511+05:30","@version":"1","message":"Running the evict task with compensationTime 5ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:16:53.065535+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:56.683998+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:56.684708+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:56.684769+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:16:56.685335+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:22.120871+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:22.130176+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:22.133745+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:26.803002+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:26.803954+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:26.80462+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:26.805475+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:52.119931+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:52.124986+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:52.126197+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:53.066725+05:30","@version":"1","message":"Running the evict task with compensationTime 4ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:17:53.067135+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:57.036092+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:57.038003+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:57.038237+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:17:57.038357+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:22.131602+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:22.15441+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:22.157866+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:27.259252+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:27.260259+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:27.260409+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:27.261495+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:52.135059+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:52.137446+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:52.141861+05:30","@version":"1","message":"The number of elements in the delta queue is : 0","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:52.147422+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:52.153074+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:52.153297+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:52.160435+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:53.070313+05:30","@version":"1","message":"Running the evict task with compensationTime 5ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:18:53.070724+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:57.419533+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:57.420313+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:57.42047+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:18:57.420615+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:22.134671+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:22.142016+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:22.143243+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:27.563461+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:27.565267+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:27.565396+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:27.565564+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:52.142095+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:52.152507+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:52.156073+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:52.6377+05:30","@version":"1","message":"Resolving eureka endpoints via configuration","logger_name":"com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver","thread_name":"AsyncResolver-bootstrap-executor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:19:52.715926+05:30","@version":"1","message":"Current renewal threshold is : 1","logger_name":"com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl","thread_name":"ReplicaAwareInstanceRegistry - RenewalThresholdUpdater","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:19:53.073484+05:30","@version":"1","message":"Running the evict task with compensationTime 5ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:19:53.074051+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:57.723463+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:57.724712+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:57.725009+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:19:57.725243+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:22.142118+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:22.149119+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:22.152309+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:27.862271+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:27.863948+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:27.864108+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:27.864251+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:52.149117+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:52.153278+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:52.154876+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:53.084753+05:30","@version":"1","message":"Running the evict task with compensationTime 11ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:20:53.085832+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:58.14892+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:58.149736+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:58.149846+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:20:58.149948+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:22.147209+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:22.161659+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:22.162455+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:28.283989+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:28.285459+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:28.285593+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:28.285997+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:52.150959+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:52.154346+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:52.160783+05:30","@version":"1","message":"The number of elements in the delta queue is : 0","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:52.165256+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:52.173277+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:52.173554+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:52.181092+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:53.082901+05:30","@version":"1","message":"Running the evict task with compensationTime 2ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:21:53.08407+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:58.417263+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:58.418011+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:58.41823+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:21:58.41837+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:22.155118+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:22.166666+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:22.178067+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:28.599818+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:28.602435+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:28.602666+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:28.606544+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:52.155264+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:52.159482+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:52.160768+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:53.086866+05:30","@version":"1","message":"Running the evict task with compensationTime 5ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:22:53.087482+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:58.82598+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:58.829835+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:58.830608+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:22:58.831586+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.427732+05:30","@version":"1","message":"Unregistering application SERVICE-DISCOVERY with eureka with status DOWN","logger_name":"org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.435534+05:30","@version":"1","message":"Saw local status change event StatusChangeEvent [timestamp=1753264400435, current=DOWN, previous=UP]","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.436226+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761: registering service...","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.576265+05:30","@version":"1","message":"Registering instance 192.168.1.10:service-discovery:8761 (replication=null)","logger_name":"com.netflix.eureka.resources.ApplicationResource","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.577224+05:30","@version":"1","message":"register SERVICE-DISCOVERY, vip service-discovery, leaseDuration 90, isReplication false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.57731+05:30","@version":"1","message":"Existing lease found (existing=1753263150777, provided=1753264400435","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.577779+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.577846+05:30","@version":"1","message":"Trusting the instance status DOWN from replica or instance for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.DownOrStartingRule","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.578142+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.579729+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.579787+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.579815+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.579835+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.579855+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.579874+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.579895+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580093+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580114+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580134+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580204+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580225+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580248+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580268+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580633+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580659+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580678+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580706+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580725+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.580743+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581037+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581073+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581108+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581137+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581158+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581177+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581201+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.58123+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581466+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581488+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.581506+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:20.58153+05:30","@version":"1","message":"Registered instance SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 with status DOWN (replication=false)","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.617605+05:30","@version":"1","message":"Shutting down Eureka Server..","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.624955+05:30","@version":"1","message":"Shutting down ...","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.640193+05:30","@version":"1","message":"Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://eureka:password@localhost:8761/eureka/} exception=java.net.SocketException: Connection reset stacktrace=jakarta.ws.rs.ProcessingException: java.net.SocketException: Connection reset\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:275)\n\tat org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:300)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$invoke$0(JerseyInvocation.java:662)\n\tat org.glassfish.jersey.client.JerseyInvocation.call(JerseyInvocation.java:697)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$runInScope$3(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:292)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:274)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:205)\n\tat org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:390)\n\tat org.glassfish.jersey.client.JerseyInvocation.runInScope(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:661)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:439)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.post(JerseyInvocation.java:345)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.register(AbstractJersey3EurekaHttpClient.java:99)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:91)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)\n\tat com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)\n\tat com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java)\n\tat --- Async.Stack.Trace --- (captured by IntelliJ IDEA debugger)\n\tat java.base/java.util.concurrent.FutureTask.<init>(FutureTask.java:151)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.<init>(ScheduledThreadPoolExecutor.java:215)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:561)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.submit(ScheduledThreadPoolExecutor.java:715)\n\tat com.netflix.discovery.InstanceInfoReplicator.onDemandUpdate(InstanceInfoReplicator.java:90)\n\tat com.netflix.discovery.DiscoveryClient$3.notify(DiscoveryClient.java:1297)\n\tat com.netflix.appinfo.ApplicationInfoManager.setInstanceStatus(ApplicationInfoManager.java:176)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:281)\n\tat org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:482)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)\n\tat com.netflix.appinfo.ApplicationInfoManager$$SpringCGLIB$$0.setInstanceStatus(<generated>)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister(EurekaServiceRegistry.java:66)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.stop(EurekaAutoServiceRegistration.java:92)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent(EurekaAutoServiceRegistration.java:153)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent(EurekaAutoServiceRegistration.java:134)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:178)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:171)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:149)\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:445)\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:378)\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1069)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:174)\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1037)\n\tat org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:145)\n\tat java.base/java.lang.Iterable.forEach(Iterable.java:75)\n\tat org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:114)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: java.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:318)\n\tat java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:346)\n\tat java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:796)\n\tat java.base/java.net.Socket$SocketInputStream.read(Socket.java:1099)\n\tat java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:291)\n\tat java.base/java.io.BufferedInputStream.read1(BufferedInputStream.java:347)\n\tat java.base/java.io.BufferedInputStream.implRead(BufferedInputStream.java:420)\n\tat java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:399)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:827)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:759)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:952)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:759)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1705)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1614)\n\tat java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:531)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:415)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:273)\n\t... 63 more\n","logger_name":"com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.642284+05:30","@version":"1","message":"Request execution failed with message: java.net.SocketException: Connection reset","logger_name":"com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:20.668293+05:30","@version":"1","message":"Shut down","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.668375+05:30","@version":"1","message":"Eureka Service is now shutdown...","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.671827+05:30","@version":"1","message":"Shutting down ...","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.679175+05:30","@version":"1","message":"Shut down","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.693357+05:30","@version":"1","message":"Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://eureka:password@localhost:8761/eureka/}, exception=java.net.ConnectException: Connection refused stacktrace=jakarta.ws.rs.ProcessingException: java.net.ConnectException: Connection refused\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:275)\n\tat org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:300)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$invoke$0(JerseyInvocation.java:662)\n\tat org.glassfish.jersey.client.JerseyInvocation.call(JerseyInvocation.java:697)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$runInScope$3(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:292)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:274)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:205)\n\tat org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:390)\n\tat org.glassfish.jersey.client.JerseyInvocation.runInScope(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:661)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:439)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.post(JerseyInvocation.java:345)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.register(AbstractJersey3EurekaHttpClient.java:99)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:121)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:80)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)\n\tat com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)\n\tat com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java)\n\tat --- Async.Stack.Trace --- (captured by IntelliJ IDEA debugger)\n\tat java.base/java.util.concurrent.FutureTask.<init>(FutureTask.java:151)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.<init>(ScheduledThreadPoolExecutor.java:215)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:561)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.submit(ScheduledThreadPoolExecutor.java:715)\n\tat com.netflix.discovery.InstanceInfoReplicator.onDemandUpdate(InstanceInfoReplicator.java:90)\n\tat com.netflix.discovery.DiscoveryClient$3.notify(DiscoveryClient.java:1297)\n\tat com.netflix.appinfo.ApplicationInfoManager.setInstanceStatus(ApplicationInfoManager.java:176)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:281)\n\tat org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:482)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)\n\tat com.netflix.appinfo.ApplicationInfoManager$$SpringCGLIB$$0.setInstanceStatus(<generated>)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister(EurekaServiceRegistry.java:66)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.stop(EurekaAutoServiceRegistration.java:92)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent(EurekaAutoServiceRegistration.java:153)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent(EurekaAutoServiceRegistration.java:134)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:178)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:171)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:149)\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:445)\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:378)\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1069)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:174)\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1037)\n\tat org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:145)\n\tat java.base/java.lang.Iterable.forEach(Iterable.java:75)\n\tat org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:114)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.base/sun.nio.ch.Net.pollConnect(Native Method)\n\tat java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)\n\tat java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:549)\n\tat java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)\n\tat java.base/java.net.Socket.connect(Socket.java:751)\n\tat java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:178)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:782)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1705)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1614)\n\tat java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:531)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:415)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:273)\n\t... 64 more\n","logger_name":"com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.694588+05:30","@version":"1","message":"Request execution failed with message: java.net.ConnectException: Connection refused","logger_name":"com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:20.697669+05:30","@version":"1","message":"Shutting down DiscoveryClient ...","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.695286+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 - registration failed Cannot execute request on any known server","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"WARN","level_value":30000,"stack_trace":"com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)\n\tat com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)\n\tat com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"}
{"@timestamp":"2025-07-23T15:23:20.705057+05:30","@version":"1","message":"There was a problem with the instance info replicator","logger_name":"com.netflix.discovery.InstanceInfoReplicator","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"WARN","level_value":30000,"stack_trace":"com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)\n\tat com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)\n\tat com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"}
{"@timestamp":"2025-07-23T15:23:20.708216+05:30","@version":"1","message":"Unregistering ...","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.722363+05:30","@version":"1","message":"Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://eureka:password@localhost:8761/eureka/}, exception=java.net.ConnectException: Connection refused stacktrace=jakarta.ws.rs.ProcessingException: java.net.ConnectException: Connection refused\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:275)\n\tat org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:300)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$invoke$0(JerseyInvocation.java:662)\n\tat org.glassfish.jersey.client.JerseyInvocation.call(JerseyInvocation.java:697)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$runInScope$3(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:292)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:274)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:205)\n\tat org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:390)\n\tat org.glassfish.jersey.client.JerseyInvocation.runInScope(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:661)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:413)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.delete(JerseyInvocation.java:362)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.cancel(AbstractJersey3EurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:121)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:80)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:916)\n\tat com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:892)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:415)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:239)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:202)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:195)\n\tat org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:389)\n\tat org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:136)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1200)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1193)\n\tat org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1125)\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1086)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:174)\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1037)\n\tat org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:145)\n\tat java.base/java.lang.Iterable.forEach(Iterable.java:75)\n\tat org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:114)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.base/sun.nio.ch.Net.pollConnect(Native Method)\n\tat java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)\n\tat java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:549)\n\tat java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)\n\tat java.base/java.net.Socket.connect(Socket.java:751)\n\tat java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:178)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)\n\tat java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)\n\tat java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)\n\tat java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1319)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1252)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1138)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1067)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1690)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1614)\n\tat java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:531)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:415)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:273)\n\t... 51 more\n","logger_name":"com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:20.722588+05:30","@version":"1","message":"Request execution failed with message: java.net.ConnectException: Connection refused","logger_name":"com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient","thread_name":"SpringApplicationShutdownHook","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:20.722631+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 - de-registration failedCannot execute request on any known server","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"ERROR","level_value":40000,"stack_trace":"com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:916)\n\tat com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:892)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:415)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:239)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:202)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:195)\n\tat org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:389)\n\tat org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:136)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1200)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1193)\n\tat org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1125)\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1086)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:174)\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1037)\n\tat org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:145)\n\tat java.base/java.lang.Iterable.forEach(Iterable.java:75)\n\tat org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:114)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"}
{"@timestamp":"2025-07-23T15:23:20.734123+05:30","@version":"1","message":"Completed shut down of DiscoveryClient","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:23.578034+05:30","@version":"1","message":"Starting ServiceDiscoveryApplication using Java 21.0.5 with PID 55505 (/Users/biswajitsahu/Desktop/Digital Wallet and Card Management System/discovery/target/classes started by biswajitsahu in /Users/biswajitsahu/Desktop/Digital Wallet and Card Management System)","logger_name":"com.bank.api.discovery.ServiceDiscoveryApplication","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:23.587463+05:30","@version":"1","message":"No active profile set, falling back to 1 default profile: \"default\"","logger_name":"com.bank.api.discovery.ServiceDiscoveryApplication","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:24.255985+05:30","@version":"1","message":"BeanFactory id=f7e073f9-47e5-345a-9afd-7e54aa0bfe13","logger_name":"org.springframework.cloud.context.scope.GenericScope","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:24.288378+05:30","@version":"1","message":"Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [lbRestClientPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.29117+05:30","@version":"1","message":"Bean 'org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration' of type [org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.292211+05:30","@version":"1","message":"Bean 'org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration' of type [org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.29607+05:30","@version":"1","message":"Bean 'org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration' of type [org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.297054+05:30","@version":"1","message":"Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.297389+05:30","@version":"1","message":"Bean 'loadBalancerClientsDefaultsMappingsProvider' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration$$Lambda/0x000000050141f000] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.298219+05:30","@version":"1","message":"Bean 'defaultsBindHandlerAdvisor' of type [org.springframework.cloud.commons.config.DefaultsBindHandlerAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.302623+05:30","@version":"1","message":"Bean 'spring.cloud.loadbalancer-org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.307253+05:30","@version":"1","message":"Bean 'default.org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration.LoadBalancerClientSpecification' of type [org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientSpecification] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.307704+05:30","@version":"1","message":"Bean 'default.org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration.LoadBalancerClientSpecification' of type [org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientSpecification] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.307991+05:30","@version":"1","message":"Bean 'default.org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration.LoadBalancerClientSpecification' of type [org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientSpecification] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.30859+05:30","@version":"1","message":"Bean 'loadBalancerClientFactory' of type [org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.309544+05:30","@version":"1","message":"Bean 'blockingLoadBalancerClient' of type [org.springframework.cloud.loadbalancer.blocking.client.BlockingLoadBalancerClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.313587+05:30","@version":"1","message":"Bean 'loadBalancerServiceInstanceCookieTransformer' of type [org.springframework.cloud.loadbalancer.core.LoadBalancerServiceInstanceCookieTransformer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.314192+05:30","@version":"1","message":"Bean 'xForwarderHeadersTransformer' of type [org.springframework.cloud.loadbalancer.blocking.XForwardedHeadersTransformer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.314806+05:30","@version":"1","message":"Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.315608+05:30","@version":"1","message":"Bean 'loadBalancerRequestFactory' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerRequestFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.316364+05:30","@version":"1","message":"Bean 'loadBalancerInterceptor' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.","logger_name":"org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:24.447387+05:30","@version":"1","message":"Tomcat initialized with port 8761 (http)","logger_name":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:24.452623+05:30","@version":"1","message":"Initializing ProtocolHandler [\"http-nio-8761\"]","logger_name":"org.apache.coyote.http11.Http11NioProtocol","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:24.4539+05:30","@version":"1","message":"Starting service [Tomcat]","logger_name":"org.apache.catalina.core.StandardService","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:24.454024+05:30","@version":"1","message":"Starting Servlet engine: [Apache Tomcat/10.1.16]","logger_name":"org.apache.catalina.core.StandardEngine","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:24.499197+05:30","@version":"1","message":"Initializing Spring embedded WebApplicationContext","logger_name":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:24.501279+05:30","@version":"1","message":"Root WebApplicationContext: initialization completed in 888 ms","logger_name":"org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:24.732072+05:30","@version":"1","message":"Filter 'eurekaVersionFilterRegistration' configured for use","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration$1","thread_name":"main","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:24.980531+05:30","@version":"1","message":"Using JSON encoding codec LegacyJacksonJson","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:24.981206+05:30","@version":"1","message":"Using JSON decoding codec LegacyJacksonJson","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.086655+05:30","@version":"1","message":"Using XML encoding codec XStreamXml","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.086808+05:30","@version":"1","message":"Using XML decoding codec XStreamXml","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.409376+05:30","@version":"1","message":"Constructed eureka meta-data healthcheckUrl: http://localhost:8761/actuator/health","logger_name":"org.springframework.cloud.netflix.eureka.metadata.DefaultManagementMetadataProvider","thread_name":"main","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:25.409557+05:30","@version":"1","message":"Constructed eureka meta-data statusPageUrl: http://localhost:8761/actuator/info","logger_name":"org.springframework.cloud.netflix.eureka.metadata.DefaultManagementMetadataProvider","thread_name":"main","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:25.438139+05:30","@version":"1","message":"Exposing 2 endpoint(s) beneath base path '/actuator'","logger_name":"org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.455608+05:30","@version":"1","message":"Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3976910, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6e149395, org.springframework.security.web.context.SecurityContextHolderFilter@374bf34b, org.springframework.security.web.header.HeaderWriterFilter@7ed5cc8c, org.springframework.web.filter.CorsFilter@19bbb216, org.springframework.security.web.authentication.logout.LogoutFilter@531b1778, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@25890ce3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6efc9d3f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@294bb6ae, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6cfac0bd, org.springframework.security.web.access.ExceptionTranslationFilter@7f6a6d46, org.springframework.security.web.access.intercept.AuthorizationFilter@6778636f]","logger_name":"org.springframework.security.web.DefaultSecurityFilterChain","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.686718+05:30","@version":"1","message":"Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.","logger_name":"org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:25.700975+05:30","@version":"1","message":"Setting initial instance status as: STARTING","logger_name":"org.springframework.cloud.netflix.eureka.InstanceInfoFactory","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.766073+05:30","@version":"1","message":"Initializing Eureka in region us-east-1","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.772277+05:30","@version":"1","message":"Using JSON encoding codec LegacyJacksonJson","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.772413+05:30","@version":"1","message":"Using JSON decoding codec LegacyJacksonJson","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.772457+05:30","@version":"1","message":"Using XML encoding codec XStreamXml","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.772495+05:30","@version":"1","message":"Using XML decoding codec XStreamXml","logger_name":"com.netflix.discovery.provider.DiscoveryJerseyProvider","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.782773+05:30","@version":"1","message":"Resolving eureka endpoints via configuration","logger_name":"com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.793048+05:30","@version":"1","message":"Disable delta property : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.793193+05:30","@version":"1","message":"Single vip registry refresh property : null","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.793239+05:30","@version":"1","message":"Force full registry fetch : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.793276+05:30","@version":"1","message":"Application is null : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.793315+05:30","@version":"1","message":"Registered Applications size is zero : true","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.793355+05:30","@version":"1","message":"Application version is -1: true","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.793395+05:30","@version":"1","message":"Getting all instance registry info from the eureka server","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.876976+05:30","@version":"1","message":"Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://eureka:password@localhost:8761/eureka/}, exception=java.net.ConnectException: Connection refused stacktrace=jakarta.ws.rs.ProcessingException: java.net.ConnectException: Connection refused\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:275)\n\tat org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:300)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$invoke$0(JerseyInvocation.java:662)\n\tat org.glassfish.jersey.client.JerseyInvocation.call(JerseyInvocation.java:697)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$runInScope$3(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:292)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:274)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:205)\n\tat org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:390)\n\tat org.glassfish.jersey.client.JerseyInvocation.runInScope(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:661)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:413)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.get(JerseyInvocation.java:313)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.getApplicationsInternal(AbstractJersey3EurekaHttpClient.java:266)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.getApplications(AbstractJersey3EurekaHttpClient.java:213)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:121)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:80)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1045)\n\tat com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:958)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:396)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:247)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:242)\n\tat org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:68)\n\tat org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:320)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:643)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:364)\n\tat org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:375)\n\tat org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:179)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:361)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:229)\n\tat jdk.proxy2/jdk.proxy2.$Proxy75.getApplications(Unknown Source)\n\tat org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration.peerAwareInstanceRegistry(EurekaServerAutoConfiguration.java:211)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:643)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)\n\tat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)\n\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:546)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:323)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)\n\tat com.bank.api.discovery.ServiceDiscoveryApplication.main(ServiceDiscoveryApplication.java:12)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.base/sun.nio.ch.Net.pollConnect(Native Method)\n\tat java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)\n\tat java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)\n\tat java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)\n\tat java.base/java.net.Socket.connect(Socket.java:751)\n\tat java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:178)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)\n\tat java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)\n\tat java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)\n\tat java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1319)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1252)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1138)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1067)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1690)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1614)\n\tat java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:531)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:415)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:273)\n\t... 103 more\n","logger_name":"com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.878121+05:30","@version":"1","message":"Request execution failed with message: java.net.ConnectException: Connection refused","logger_name":"com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:25.878536+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 - was unable to refresh its cache! This periodic background refresh will be retried in 30 seconds. status = Cannot execute request on any known server stacktrace = com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)\n\tat com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1045)\n\tat com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:958)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:396)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:247)\n\tat com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:242)\n\tat org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:68)\n\tat org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:320)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:643)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:364)\n\tat org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:375)\n\tat org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:179)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:361)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:229)\n\tat jdk.proxy2/jdk.proxy2.$Proxy75.getApplications(Unknown Source)\n\tat org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration.peerAwareInstanceRegistry(EurekaServerAutoConfiguration.java:211)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:651)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:643)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)\n\tat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)\n\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)\n\tat org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:546)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:323)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)\n\tat com.bank.api.discovery.ServiceDiscoveryApplication.main(ServiceDiscoveryApplication.java:12)\n","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.879233+05:30","@version":"1","message":"Initial registry fetch from primary servers failed","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.879312+05:30","@version":"1","message":"Using default backup registry implementation which does not do anything.","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:25.879562+05:30","@version":"1","message":"Initial registry fetch from backup servers failed","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.880336+05:30","@version":"1","message":"Starting heartbeat executor: renew interval is: 30","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.88142+05:30","@version":"1","message":"InstanceInfoReplicator onDemand update allowed rate per min is 4","logger_name":"com.netflix.discovery.InstanceInfoReplicator","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.883784+05:30","@version":"1","message":"Discovery Client initialized at timestamp 1753264405883 with initial instances count: 0","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.910868+05:30","@version":"1","message":"Initializing ...","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.912058+05:30","@version":"1","message":"The replica size seems to be empty. Check the route 53 DNS Registry","logger_name":"com.netflix.eureka.cluster.PeerEurekaNodes","thread_name":"main","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:25.918838+05:30","@version":"1","message":"Finished initializing remote region registries. All known remote regions: []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.919922+05:30","@version":"1","message":"Initialized","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.964344+05:30","@version":"1","message":"Registering application SERVICE-DISCOVERY with eureka with status UP","logger_name":"org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.965044+05:30","@version":"1","message":"Saw local status change event StatusChangeEvent [timestamp=1753264405965, current=UP, previous=STARTING]","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.966665+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761: registering service...","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.967982+05:30","@version":"1","message":"Starting ProtocolHandler [\"http-nio-8761\"]","logger_name":"org.apache.coyote.http11.Http11NioProtocol","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.97486+05:30","@version":"1","message":"isAws returned false","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.97539+05:30","@version":"1","message":"Initialized server context","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.98881+05:30","@version":"1","message":"Tomcat started on port 8761 (http) with context path ''","logger_name":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:25.989514+05:30","@version":"1","message":"Updating port to 8761","logger_name":"org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:26.012881+05:30","@version":"1","message":"Started ServiceDiscoveryApplication in 3.106 seconds (process running for 3.985)","logger_name":"com.bank.api.discovery.ServiceDiscoveryApplication","thread_name":"main","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:26.053956+05:30","@version":"1","message":"Initializing Spring DispatcherServlet 'dispatcherServlet'","logger_name":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]","thread_name":"http-nio-8761-exec-1","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:26.054173+05:30","@version":"1","message":"Initializing Servlet 'dispatcherServlet'","logger_name":"org.springframework.web.servlet.DispatcherServlet","thread_name":"http-nio-8761-exec-1","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:26.054753+05:30","@version":"1","message":"Completed initialization in 0 ms","logger_name":"org.springframework.web.servlet.DispatcherServlet","thread_name":"http-nio-8761-exec-1","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:26.069393+05:30","@version":"1","message":"Cache miss for REQUEST dispatch to '/eureka/apps/SERVICE-DISCOVERY' (previous null). Performing CorsConfiguration lookup. This is logged once only at WARN level, and every time at TRACE.","logger_name":"org.springframework.web.servlet.handler.HandlerMappingIntrospector","thread_name":"http-nio-8761-exec-1","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:26.244521+05:30","@version":"1","message":"Cache miss for REQUEST dispatch to '/eureka/apps/SERVICE-DISCOVERY' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.","logger_name":"org.springframework.web.servlet.handler.HandlerMappingIntrospector","thread_name":"http-nio-8761-exec-1","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:23:26.28399+05:30","@version":"1","message":"Registering instance 192.168.1.10:service-discovery:8761 (replication=null)","logger_name":"com.netflix.eureka.resources.ApplicationResource","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.285589+05:30","@version":"1","message":"register SERVICE-DISCOVERY, vip service-discovery, leaseDuration 90, isReplication false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.286938+05:30","@version":"1","message":"No previous lease information found; it is new registration","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.28721+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.287377+05:30","@version":"1","message":"Returning the default instance status UP for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.287624+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.28797+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.28803+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288077+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288116+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.28816+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288203+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288247+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288291+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288333+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288374+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288411+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288449+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288491+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288531+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288572+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288614+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288651+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288688+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288725+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288766+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288803+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288844+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.28888+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.288986+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.289041+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.289083+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.28912+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.289158+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.289197+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.289234+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.289277+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:26.289328+05:30","@version":"1","message":"Registered instance SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 with status UP (replication=false)","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:26.297081+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 - registration status: 204","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:30.004005+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:54.68965+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:55.88856+05:30","@version":"1","message":"Disable delta property : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:55.891986+05:30","@version":"1","message":"Single vip registry refresh property : null","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:55.892062+05:30","@version":"1","message":"Force full registry fetch : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:55.892112+05:30","@version":"1","message":"Application is null : false","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:55.892158+05:30","@version":"1","message":"Registered Applications size is zero : true","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:55.892296+05:30","@version":"1","message":"Application version is -1: true","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:55.892495+05:30","@version":"1","message":"Getting all instance registry info from the eureka server","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:23:56.050156+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:56.051694+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:56.05248+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:56.053075+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:56.059752+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:56.066005+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-4","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:23:56.084282+05:30","@version":"1","message":"The response status is 200","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-CacheRefreshExecutor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:24:00.008144+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:00.010029+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:01.509876+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:06.62319+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:13.46242+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.988401+05:30","@version":"1","message":"register SERVICE-DISCOVERY, vip service-discovery, leaseDuration 90, isReplication true","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.995666+05:30","@version":"1","message":"Existing lease found (existing=1753264405964, provided=1753264405964","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.996069+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.996151+05:30","@version":"1","message":"Returning the default instance status UP for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.996499+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.996921+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.997024+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.997079+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.99713+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.997194+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.99725+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.997309+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.99736+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.997451+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:25.997508+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.017895+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018157+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018207+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.01825+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018289+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 JSON, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018353+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.01839+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018422+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018454+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018484+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018516+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018549+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018584+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V1 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018618+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018648+05:30","@version":"1","message":"Invalidating the response cache key : Application SERVICE-DISCOVERY V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018742+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018823+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018868+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018915+05:30","@version":"1","message":"Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018954+05:30","@version":"1","message":"Invalidating the response cache key : VIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.018991+05:30","@version":"1","message":"Invalidating the response cache key : SVIP service-discovery V2 XML, full","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Thread-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.019046+05:30","@version":"1","message":"Registered instance SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 with status UP (replication=true)","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:24:26.019185+05:30","@version":"1","message":"Got 1 instances from neighboring DS node","logger_name":"com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:24:26.01926+05:30","@version":"1","message":"Renew threshold is: 1","logger_name":"com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:24:26.019461+05:30","@version":"1","message":"Changing status to UP","logger_name":"com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:24:26.030668+05:30","@version":"1","message":"Started Eureka Server","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration","thread_name":"Thread-9","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:24:26.15316+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.153598+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.153665+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.15388+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.18251+05:30","@version":"1","message":"The number of elements in the delta queue is : 2","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.18266+05:30","@version":"1","message":"The instance id 192.168.1.10:service-discovery:8761 is found with status UP and actiontype ADDED","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.182721+05:30","@version":"1","message":"The instance id 192.168.1.10:service-discovery:8761 is found with status UP and actiontype ADDED","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:26.183332+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:30.012678+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:30.01639+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:30.017193+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:30.018062+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:30.021829+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:56.292847+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:56.297048+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:56.297568+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:24:56.298055+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:00.015174+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:00.015971+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:00.016286+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:26.032005+05:30","@version":"1","message":"Running the evict task with compensationTime 0ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:25:26.036196+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:26.434818+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:26.435097+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:26.435212+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:26.435345+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:30.018358+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:30.021311+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:30.022416+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:56.586503+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:56.587247+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:56.587357+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:25:56.587465+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:00.018282+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:00.019038+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:00.019231+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:26.025761+05:30","@version":"1","message":"Running the evict task with compensationTime 2ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:26:26.028485+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:26.720081+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:26.720367+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:26.720527+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:26.721301+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:30.023422+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:30.025719+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:30.026526+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:56.838606+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:56.839466+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:56.839592+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:26:56.839909+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:00.026753+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:00.027782+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:00.028043+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:26.028108+05:30","@version":"1","message":"Running the evict task with compensationTime 4ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:27:26.030136+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:27.000158+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:27.001563+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:27.002029+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:27.002238+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:30.029682+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:30.031645+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:30.035399+05:30","@version":"1","message":"The number of elements in the delta queue is : 1","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:30.035684+05:30","@version":"1","message":"The instance id 192.168.1.10:service-discovery:8761 is found with status UP and actiontype ADDED","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:30.039393+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:30.041123+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:30.041264+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:30.041725+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:57.142876+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:57.144441+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:57.144602+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:27:57.144752+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:00.031298+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:00.032243+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:00.032477+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:25.792578+05:30","@version":"1","message":"Resolving eureka endpoints via configuration","logger_name":"com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver","thread_name":"AsyncResolver-bootstrap-executor-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:28:26.030282+05:30","@version":"1","message":"Running the evict task with compensationTime 4ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:28:26.030543+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:27.261585+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:27.262021+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:27.262131+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:27.262255+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:30.034914+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:30.037276+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:30.03913+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:57.399431+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:57.40032+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:57.400457+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:28:57.400592+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:00.038985+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:00.040365+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:00.040858+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:26.032656+05:30","@version":"1","message":"Running the evict task with compensationTime 4ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:29:26.034467+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:27.526925+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:27.527501+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:27.527634+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:27.52781+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-10","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:30.041944+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:30.042298+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:30.042528+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:57.664486+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:57.668126+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:57.66878+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:29:57.669079+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-2","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:00.044477+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:00.04522+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:00.04535+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:26.036014+05:30","@version":"1","message":"Running the evict task with compensationTime 5ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:30:26.039173+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:27.813395+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:27.81507+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:27.815346+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:27.815553+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-6","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:30.048689+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:30.050127+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:30.056914+05:30","@version":"1","message":"The number of elements in the delta queue is : 0","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:30.063323+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:30.068144+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:30.068338+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:30.073842+05:30","@version":"1","message":"New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:31.432886+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:33.110848+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-7","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:33.854443+05:30","@version":"1","message":"Fetching applications registry with remote regions: false, Regions argument []","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-9","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:58.137433+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:58.139926+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:58.14007+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:30:58.140782+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-3","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:00.049325+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:00.052797+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:00.052981+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:26.037252+05:30","@version":"1","message":"Running the evict task with compensationTime 4ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:31:26.038263+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:28.285026+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:28.28569+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:28.285888+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:28.286061+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-5","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:30.052321+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:30.053086+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:30.053586+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:58.500553+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:58.516986+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:58.51774+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:31:58.517932+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-8","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:32:00.057577+05:30","@version":"1","message":"Updating the client cache from response cache","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:32:00.064058+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:32:00.065292+05:30","@version":"1","message":"Updating the client cache from response cache for key : Application ALL_APPS V2 JSON","logger_name":"com.netflix.eureka.registry.ResponseCacheImpl","thread_name":"Eureka-CacheFillTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:32:26.039768+05:30","@version":"1","message":"Running the evict task with compensationTime 5ms","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:26.04063+05:30","@version":"1","message":"Running the evict task","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"Eureka-EvictionTimer","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:32:28.654492+05:30","@version":"1","message":"renew SERVICE-DISCOVERY serverId 192.168.1.10:service-discovery:8761, isReplication {}false","logger_name":"org.springframework.cloud.netflix.eureka.server.InstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:32:28.655923+05:30","@version":"1","message":"Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]","logger_name":"com.netflix.eureka.registry.AbstractInstanceRegistry","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:32:28.656296+05:30","@version":"1","message":"There is already an existing lease with status UP  for instance 192.168.1.10:service-discovery:8761","logger_name":"com.netflix.eureka.registry.rule.LeaseExistsRule","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:32:28.656404+05:30","@version":"1","message":"Found (Renew): SERVICE-DISCOVERY - 192.168.1.10:service-discovery:8761; reply status=200","logger_name":"com.netflix.eureka.resources.InstanceResource","thread_name":"http-nio-8761-exec-1","level":"DEBUG","level_value":10000}
{"@timestamp":"2025-07-23T15:32:29.625803+05:30","@version":"1","message":"Unregistering application SERVICE-DISCOVERY with eureka with status DOWN","logger_name":"org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.627255+05:30","@version":"1","message":"Saw local status change event StatusChangeEvent [timestamp=1753264949627, current=DOWN, previous=UP]","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.628074+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761: registering service...","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.756121+05:30","@version":"1","message":"Shutting down Eureka Server..","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.76405+05:30","@version":"1","message":"Shutting down ...","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.774972+05:30","@version":"1","message":"Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://eureka:password@localhost:8761/eureka/} exception=java.net.SocketException: Connection reset stacktrace=jakarta.ws.rs.ProcessingException: java.net.SocketException: Connection reset\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:275)\n\tat org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:300)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$invoke$0(JerseyInvocation.java:662)\n\tat org.glassfish.jersey.client.JerseyInvocation.call(JerseyInvocation.java:697)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$runInScope$3(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:292)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:274)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:205)\n\tat org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:390)\n\tat org.glassfish.jersey.client.JerseyInvocation.runInScope(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:661)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:439)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.post(JerseyInvocation.java:345)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.register(AbstractJersey3EurekaHttpClient.java:99)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:91)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)\n\tat com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)\n\tat com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java)\n\tat --- Async.Stack.Trace --- (captured by IntelliJ IDEA debugger)\n\tat java.base/java.util.concurrent.FutureTask.<init>(FutureTask.java:151)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.<init>(ScheduledThreadPoolExecutor.java:215)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:561)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.submit(ScheduledThreadPoolExecutor.java:715)\n\tat com.netflix.discovery.InstanceInfoReplicator.onDemandUpdate(InstanceInfoReplicator.java:90)\n\tat com.netflix.discovery.DiscoveryClient$3.notify(DiscoveryClient.java:1297)\n\tat com.netflix.appinfo.ApplicationInfoManager.setInstanceStatus(ApplicationInfoManager.java:176)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:281)\n\tat org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:482)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)\n\tat com.netflix.appinfo.ApplicationInfoManager$$SpringCGLIB$$0.setInstanceStatus(<generated>)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister(EurekaServiceRegistry.java:66)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.stop(EurekaAutoServiceRegistration.java:92)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent(EurekaAutoServiceRegistration.java:153)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent(EurekaAutoServiceRegistration.java:134)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:178)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:171)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:149)\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:445)\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:378)\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1069)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:174)\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1037)\n\tat org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:145)\n\tat java.base/java.lang.Iterable.forEach(Iterable.java:75)\n\tat org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:114)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: java.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:318)\n\tat java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:346)\n\tat java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:796)\n\tat java.base/java.net.Socket$SocketInputStream.read(Socket.java:1099)\n\tat java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:291)\n\tat java.base/java.io.BufferedInputStream.read1(BufferedInputStream.java:347)\n\tat java.base/java.io.BufferedInputStream.implRead(BufferedInputStream.java:420)\n\tat java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:399)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:827)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:759)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:952)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:759)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1705)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1614)\n\tat java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:531)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:415)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:273)\n\t... 63 more\n","logger_name":"com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.77611+05:30","@version":"1","message":"Request execution failed with message: java.net.SocketException: Connection reset","logger_name":"com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:32:29.790741+05:30","@version":"1","message":"Shut down","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.790841+05:30","@version":"1","message":"Eureka Service is now shutdown...","logger_name":"org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.794064+05:30","@version":"1","message":"Shutting down ...","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.805818+05:30","@version":"1","message":"Shut down","logger_name":"com.netflix.eureka.DefaultEurekaServerContext","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.823088+05:30","@version":"1","message":"Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://eureka:password@localhost:8761/eureka/}, exception=java.net.ConnectException: Connection refused stacktrace=jakarta.ws.rs.ProcessingException: java.net.ConnectException: Connection refused\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:275)\n\tat org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:300)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$invoke$0(JerseyInvocation.java:662)\n\tat org.glassfish.jersey.client.JerseyInvocation.call(JerseyInvocation.java:697)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$runInScope$3(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:292)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:274)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:205)\n\tat org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:390)\n\tat org.glassfish.jersey.client.JerseyInvocation.runInScope(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:661)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:439)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.post(JerseyInvocation.java:345)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.register(AbstractJersey3EurekaHttpClient.java:99)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:121)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:80)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)\n\tat com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)\n\tat com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java)\n\tat --- Async.Stack.Trace --- (captured by IntelliJ IDEA debugger)\n\tat java.base/java.util.concurrent.FutureTask.<init>(FutureTask.java:151)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.<init>(ScheduledThreadPoolExecutor.java:215)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:561)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.submit(ScheduledThreadPoolExecutor.java:715)\n\tat com.netflix.discovery.InstanceInfoReplicator.onDemandUpdate(InstanceInfoReplicator.java:90)\n\tat com.netflix.discovery.DiscoveryClient$3.notify(DiscoveryClient.java:1297)\n\tat com.netflix.appinfo.ApplicationInfoManager.setInstanceStatus(ApplicationInfoManager.java:176)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:281)\n\tat org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:482)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)\n\tat com.netflix.appinfo.ApplicationInfoManager$$SpringCGLIB$$0.setInstanceStatus(<generated>)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.deregister(EurekaServiceRegistry.java:66)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.stop(EurekaAutoServiceRegistration.java:92)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent(EurekaAutoServiceRegistration.java:153)\n\tat org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.onApplicationEvent(EurekaAutoServiceRegistration.java:134)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:178)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:171)\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:149)\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:445)\n\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:378)\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1069)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:174)\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1037)\n\tat org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:145)\n\tat java.base/java.lang.Iterable.forEach(Iterable.java:75)\n\tat org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:114)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.base/sun.nio.ch.Net.pollConnect(Native Method)\n\tat java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)\n\tat java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:549)\n\tat java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)\n\tat java.base/java.net.Socket.connect(Socket.java:751)\n\tat java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:178)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:948)\n\tat java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:759)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1705)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1614)\n\tat java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:531)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:415)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:273)\n\t... 64 more\n","logger_name":"com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.823525+05:30","@version":"1","message":"Request execution failed with message: java.net.ConnectException: Connection refused","logger_name":"com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:32:29.824597+05:30","@version":"1","message":"Shutting down DiscoveryClient ...","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.824095+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 - registration failed Cannot execute request on any known server","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"WARN","level_value":30000,"stack_trace":"com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)\n\tat com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)\n\tat com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"}
{"@timestamp":"2025-07-23T15:32:29.833747+05:30","@version":"1","message":"There was a problem with the instance info replicator","logger_name":"com.netflix.discovery.InstanceInfoReplicator","thread_name":"DiscoveryClient-InstanceInfoReplicator-0","level":"WARN","level_value":30000,"stack_trace":"com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)\n\tat com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)\n\tat com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)\n\tat com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\n\tat java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:317)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"}
{"@timestamp":"2025-07-23T15:32:29.836281+05:30","@version":"1","message":"Unregistering ...","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.85175+05:30","@version":"1","message":"Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://eureka:password@localhost:8761/eureka/}, exception=java.net.ConnectException: Connection refused stacktrace=jakarta.ws.rs.ProcessingException: java.net.ConnectException: Connection refused\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:275)\n\tat org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:300)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$invoke$0(JerseyInvocation.java:662)\n\tat org.glassfish.jersey.client.JerseyInvocation.call(JerseyInvocation.java:697)\n\tat org.glassfish.jersey.client.JerseyInvocation.lambda$runInScope$3(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:292)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:274)\n\tat org.glassfish.jersey.internal.Errors.process(Errors.java:205)\n\tat org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:390)\n\tat org.glassfish.jersey.client.JerseyInvocation.runInScope(JerseyInvocation.java:691)\n\tat org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:661)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:413)\n\tat org.glassfish.jersey.client.JerseyInvocation$Builder.delete(JerseyInvocation.java:362)\n\tat com.netflix.discovery.shared.transport.jersey3.AbstractJersey3EurekaHttpClient.cancel(AbstractJersey3EurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:121)\n\tat com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:80)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:916)\n\tat com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:892)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:415)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:239)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:202)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:195)\n\tat org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:389)\n\tat org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:136)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1200)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1193)\n\tat org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1125)\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1086)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:174)\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1037)\n\tat org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:145)\n\tat java.base/java.lang.Iterable.forEach(Iterable.java:75)\n\tat org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:114)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\nCaused by: java.net.ConnectException: Connection refused\n\tat java.base/sun.nio.ch.Net.pollConnect(Native Method)\n\tat java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)\n\tat java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:549)\n\tat java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)\n\tat java.base/java.net.Socket.connect(Socket.java:751)\n\tat java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:178)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)\n\tat java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)\n\tat java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)\n\tat java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)\n\tat java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1319)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1252)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1138)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1067)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1690)\n\tat java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1614)\n\tat java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:531)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:415)\n\tat org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:273)\n\t... 51 more\n","logger_name":"com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
{"@timestamp":"2025-07-23T15:32:29.851905+05:30","@version":"1","message":"Request execution failed with message: java.net.ConnectException: Connection refused","logger_name":"com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient","thread_name":"SpringApplicationShutdownHook","level":"WARN","level_value":30000}
{"@timestamp":"2025-07-23T15:32:29.851955+05:30","@version":"1","message":"DiscoveryClient_SERVICE-DISCOVERY/192.168.1.10:service-discovery:8761 - de-registration failedCannot execute request on any known server","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"ERROR","level_value":40000,"stack_trace":"com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server\n\tat com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74)\n\tat com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)\n\tat com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)\n\tat com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:916)\n\tat com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:892)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:415)\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:239)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:202)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:195)\n\tat org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:389)\n\tat org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:136)\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1200)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1193)\n\tat org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1125)\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1086)\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.doClose(ServletWebServerApplicationContext.java:174)\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1037)\n\tat org.springframework.boot.SpringApplicationShutdownHook.closeAndWait(SpringApplicationShutdownHook.java:145)\n\tat java.base/java.lang.Iterable.forEach(Iterable.java:75)\n\tat org.springframework.boot.SpringApplicationShutdownHook.run(SpringApplicationShutdownHook.java:114)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n"}
{"@timestamp":"2025-07-23T15:32:29.865942+05:30","@version":"1","message":"Completed shut down of DiscoveryClient","logger_name":"com.netflix.discovery.DiscoveryClient","thread_name":"SpringApplicationShutdownHook","level":"INFO","level_value":20000}
